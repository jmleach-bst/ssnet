// Generated by rstantools.  Do not edit by hand.

/*
    ssnet is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ssnet is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ssnet.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_iar_incl_prob_20may2021_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 14> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 18, column 2 to column 37)",
  " (in 'string', line 8, column 2 to column 19)",
  " (in 'string', line 9, column 2 to column 25)",
  " (in 'string', line 10, column 34 to column 41)",
  " (in 'string', line 10, column 2 to column 43)",
  " (in 'string', line 11, column 34 to column 41)",
  " (in 'string', line 11, column 2 to column 43)",
  " (in 'string', line 12, column 31 to column 32)",
  " (in 'string', line 12, column 2 to column 36)",
  " (in 'string', line 15, column 9 to column 10)",
  " (in 'string', line 15, column 2 to column 27)",
  " (in 'string', line 3, column 4 to line 4, column 45)",
  " (in 'string', line 2, column 69 to line 5, column 2)"};
template <bool propto__, typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>>
icar_normal_lpdf(const T0__& psi_arg__, const int& J, const std::vector<int>&
                 node1, const std::vector<int>& node2, std::ostream*
                 pstream__);
template <bool propto__, typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
icar_normal_lpdf(const T0__& psi_arg__, const int& J, const std::vector<int>&
                 node1, const std::vector<int>& node2, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& psi = stan::math::to_ref(psi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 12;
    return ((-0.5 *
           stan::math::dot_self(
             stan::math::subtract(
               stan::model::rvalue(psi, "psi",
                 stan::model::index_multi(node1)),
               stan::model::rvalue(psi, "psi",
                 stan::model::index_multi(node2)))))
           +
           stan::math::normal_lpdf<false>(stan::math::sum(psi), 0, (0.001 *
             J)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_iar_incl_prob_20may2021 final : public model_base_crtp<model_iar_incl_prob_20may2021> {
private:
  int J;
  int J_edges;
  std::vector<int> node1;
  std::vector<int> node2;
  Eigen::Matrix<double,-1,1> p_data__;
  Eigen::Matrix<double,-1,1> psi_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> p{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> psi{nullptr, 0};
public:
  ~model_iar_incl_prob_20may2021() {}
  model_iar_incl_prob_20may2021(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0, std::ostream*
                                pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_iar_incl_prob_20may2021_namespace::model_iar_incl_prob_20may2021";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 2;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 2;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 2;
      stan::math::check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 3;
      context__.validate_dims("data initialization", "J_edges", "int",
        std::vector<size_t>{});
      J_edges = std::numeric_limits<int>::min();
      current_statement__ = 3;
      J_edges = context__.vals_i("J_edges")[(1 - 1)];
      current_statement__ = 3;
      stan::math::check_greater_or_equal(function__, "J_edges", J_edges, 0);
      current_statement__ = 4;
      stan::math::validate_non_negative_index("node1", "J_edges", J_edges);
      current_statement__ = 5;
      context__.validate_dims("data initialization", "node1", "int",
        std::vector<size_t>{static_cast<size_t>(J_edges)});
      node1 = std::vector<int>(J_edges, std::numeric_limits<int>::min());
      current_statement__ = 5;
      node1 = context__.vals_i("node1");
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "node1", node1, 1);
      current_statement__ = 5;
      stan::math::check_less_or_equal(function__, "node1", node1, J);
      current_statement__ = 6;
      stan::math::validate_non_negative_index("node2", "J_edges", J_edges);
      current_statement__ = 7;
      context__.validate_dims("data initialization", "node2", "int",
        std::vector<size_t>{static_cast<size_t>(J_edges)});
      node2 = std::vector<int>(J_edges, std::numeric_limits<int>::min());
      current_statement__ = 7;
      node2 = context__.vals_i("node2");
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "node2", node2, 1);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "node2", node2, J);
      current_statement__ = 8;
      stan::math::validate_non_negative_index("p", "J", J);
      current_statement__ = 9;
      context__.validate_dims("data initialization", "p", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      p_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&p) Eigen::Map<Eigen::Matrix<double,-1,1>>(p_data__.data(), J);
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 9;
        p_flat__ = context__.vals_r("p");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(p, p_flat__[(pos__ - 1)],
            "assigning variable p", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 9;
      stan::math::check_less_or_equal(function__, "p", p, 1);
      current_statement__ = 10;
      stan::math::validate_non_negative_index("psi", "J", J);
      current_statement__ = 11;
      psi_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                     std::numeric_limits<double>::quiet_NaN());
      new (&psi) Eigen::Map<Eigen::Matrix<double,-1,1>>(psi_data__.data(), J);
      current_statement__ = 11;
      stan::model::assign(psi, stan::math::logit(p), "assigning variable psi");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "model_iar_incl_prob_20may2021";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_iar_incl_prob_20may2021_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(icar_normal_lpdf<propto__>(psi, J, node1, node2,
                       pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_iar_incl_prob_20may2021_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_iar_incl_prob_20may2021_namespace::model_iar_incl_prob_20may2021;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_iar_incl_prob_20may2021_namespace::profiles__;
}
#endif
#endif
