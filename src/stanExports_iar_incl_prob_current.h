// Generated by rstantools.  Do not edit by hand.

/*
    ssnet is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ssnet is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ssnet.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_iar_incl_prob_current_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_iar_incl_prob_current");
    reader.add_event(33, 31, "end", "model_iar_incl_prob_current");
    return reader;
}
template <bool propto, typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
real_bernoulli_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                        const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("xs", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xs(J);
        stan::math::initialize(xs, DUMMY_VAR__);
        stan::math::fill(xs, DUMMY_VAR__);
        current_statement_begin__ = 4;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 4;
            stan::model::assign(xs, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        ((get_base1(x, j, "x", 1) * stan::math::log(get_base1(theta, j, "theta", 1))) + ((1 - get_base1(x, j, "x", 1)) * stan::math::log((1 - get_base1(theta, j, "theta", 1))))), 
                        "assigning variable xs");
        }
        current_statement_begin__ = 5;
        return stan::math::promote_scalar<fun_return_scalar_t__>(sum(xs));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
real_bernoulli_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                        const int& J, std::ostream* pstream__) {
    return real_bernoulli_lpdf<false>(x,theta,J, pstream__);
}
struct real_bernoulli_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                        const int& J, std::ostream* pstream__) const {
        return real_bernoulli_lpdf(x, theta, J, pstream__);
    }
};
template <bool propto, typename T0__, typename T4__>
typename boost::math::tools::promote_args<T0__, T4__>::type
icar_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& psi,
                     const int& J,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2,
                     const T4__& tau, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>((((((J - 1.0) / 2) * stan::math::log(tau)) - ((0.5 * tau) * dot_self(subtract(stan::model::rvalue(psi, stan::model::cons_list(stan::model::index_multi(node1), stan::model::nil_index_list()), "psi"), stan::model::rvalue(psi, stan::model::cons_list(stan::model::index_multi(node2), stan::model::nil_index_list()), "psi"))))) + normal_log(sum(psi), 0, (0.001 * J))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T4__>
typename boost::math::tools::promote_args<T0__, T4__>::type
icar_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& psi,
                     const int& J,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2,
                     const T4__& tau, std::ostream* pstream__) {
    return icar_normal_lpdf<false>(psi,J,node1,node2,tau, pstream__);
}
struct icar_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T4__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& psi,
                     const int& J,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2,
                     const T4__& tau, std::ostream* pstream__) const {
        return icar_normal_lpdf(psi, J, node1, node2, tau, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_iar_incl_prob_current
  : public stan::model::model_base_crtp<model_iar_incl_prob_current> {
private:
        int J;
        int J_edges;
        std::vector<int> node1;
        std::vector<int> node2;
        vector_d p;
public:
    model_iar_incl_prob_current(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_iar_incl_prob_current(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_iar_incl_prob_current_namespace::model_iar_incl_prob_current";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 0);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "J_edges", "int", context__.to_vec());
            J_edges = int(0);
            vals_i__ = context__.vals_i("J_edges");
            pos__ = 0;
            J_edges = vals_i__[pos__++];
            check_greater_or_equal(function__, "J_edges", J_edges, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("node1", "J_edges", J_edges);
            context__.validate_dims("data initialization", "node1", "int", context__.to_vec(J_edges));
            node1 = std::vector<int>(J_edges, int(0));
            vals_i__ = context__.vals_i("node1");
            pos__ = 0;
            size_t node1_k_0_max__ = J_edges;
            for (size_t k_0__ = 0; k_0__ < node1_k_0_max__; ++k_0__) {
                node1[k_0__] = vals_i__[pos__++];
            }
            size_t node1_i_0_max__ = J_edges;
            for (size_t i_0__ = 0; i_0__ < node1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "node1[i_0__]", node1[i_0__], 1);
                check_less_or_equal(function__, "node1[i_0__]", node1[i_0__], J);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("node2", "J_edges", J_edges);
            context__.validate_dims("data initialization", "node2", "int", context__.to_vec(J_edges));
            node2 = std::vector<int>(J_edges, int(0));
            vals_i__ = context__.vals_i("node2");
            pos__ = 0;
            size_t node2_k_0_max__ = J_edges;
            for (size_t k_0__ = 0; k_0__ < node2_k_0_max__; ++k_0__) {
                node2[k_0__] = vals_i__[pos__++];
            }
            size_t node2_i_0_max__ = J_edges;
            for (size_t i_0__ = 0; i_0__ < node2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "node2[i_0__]", node2[i_0__], 1);
                check_less_or_equal(function__, "node2[i_0__]", node2[i_0__], J);
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("p", "J", J);
            context__.validate_dims("data initialization", "p", "vector_d", context__.to_vec(J));
            p = Eigen::Matrix<double, Eigen::Dynamic, 1>(J);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            size_t p_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                p(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            validate_non_negative_index("psi", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 21;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_iar_incl_prob_current() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 20;
        if (!(context__.contains_r("psi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi");
        pos__ = 0U;
        validate_non_negative_index("psi", "J", J);
        context__.validate_dims("parameter initialization", "psi", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi(J);
        size_t psi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            psi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi;
            (void) psi;  // dummy to suppress unused var warning
            if (jacobian__)
                psi = in__.vector_constrain(J, lp__);
            else
                psi = in__.vector_constrain(J);
            current_statement_begin__ = 21;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("theta", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(J);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,inv_logit(psi));
            current_statement_begin__ = 25;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,inv(sigma));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 24;
            size_t theta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 25;
            if (stan::math::is_uninitialized(tau)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            // model body
            current_statement_begin__ = 28;
            lp_accum__.add(real_bernoulli_lpdf<propto__>(p, theta, J, pstream__));
            current_statement_begin__ = 29;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 2.5));
            current_statement_begin__ = 30;
            lp_accum__.add(icar_normal_lpdf<propto__>(psi, J, node1, node2, tau, pstream__));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("psi");
        names__.push_back("sigma");
        names__.push_back("theta");
        names__.push_back("tau");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_iar_incl_prob_current_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi = in__.vector_constrain(J);
        size_t psi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            vars__.push_back(psi(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("theta", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(J);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,inv_logit(psi));
            current_statement_begin__ = 25;
            double tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,inv(sigma));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 25;
            check_greater_or_equal(function__, "tau", tau, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
                vars__.push_back(tau);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_iar_incl_prob_current";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t psi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t psi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_iar_incl_prob_current_namespace::model_iar_incl_prob_current stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
