"foldid must be a numeric vector, matrix, or data frame."
)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T))),
"Each column of foldid must have the same number of unique folds.")
})
install.packages("goodpractice")
library(goodpractice)
goodpractice::gp()
?sapply
?vapply
warnings()
?seq_along()
ack <- data.frame(
x = rnorm(10),
y = rnorm(10)
)
seq_along(ack)
seq_along(ack$x)
seq_length(ack)
seq_len(ack)
seq_len(nrow(ack))
xi <- c("x0")
for (i in seq_len(nrow(ack))) {
xi <- c(xi, paste0("x", i))
}
xi
xi <- c("x0")
for (i in 1:nrow(ack)) {
xi <- c(xi, paste0("x", i))
}
xi
seq_len(10)
library(ssnet)
library(goodpractice)
library(ssnet)
library(ssnet)
library(goodpractice)
devtools::check_rhub()
install.packages(devtools)
install.packages("devtools")
devtools::check_rhub()
library(ssnet)
5000000*500
library(ssnet)
library(ssnet)
?cv_ssnet
t1 <- proc.time()
ns <- 25
nx <- 5
xtr <- matrix(rnorm(ns*nx), nrow = ns, ncol = nx)
xte <- matrix(rnorm(ns*nx), nrow = ns, ncol = nx)
b <- rnorm(nx)
## continuous outcome
ytr <- xtr %*% b + rnorm(ns)
yte <- xte %*% b + rnorm(ns)
## binary outcome
ybtr <- ifelse(ytr > 0, 1, 0)
ybte <- ifelse(yte > 0, 1, 0)
## multinomial outcome
ymtr <- dplyr::case_when(
ytr > 1 ~ "a",
ytr <= 1 & ytr > -1 ~ "b",
ytr <= -1 ~ "c"
)
ymte <- dplyr::case_when(
yte > 1 ~ "a",
yte <= 1 & yte > -1 ~ "b",
yte <= -1 ~ "c"
)
cv_ssnet(
model = "ss", family = "gaussian",
x = rbind(xtr, xte), y = c(ytr, yte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2
)
cv_ssnet(
model = "ss", family = "binomial",
x = rbind(xtr, xte), y = c(ybtr, ybte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2, classify = TRUE,
output_param_est = TRUE
)
cv_ssnet(
model = "ss", family = "multinomial",
x = rbind(xtr, xte), y = c(ymtr, ymte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2, classify = FALSE,
output_param_est = TRUE
)
t2 <- proc.time() - t1
t2
warnings()
t1 <- proc.time()
ns <- 100
nx <- 5
xtr <- matrix(rnorm(ns*nx), nrow = ns, ncol = nx)
xte <- matrix(rnorm(ns*nx), nrow = ns, ncol = nx)
b <- rnorm(nx)
## continuous outcome
ytr <- xtr %*% b + rnorm(ns)
yte <- xte %*% b + rnorm(ns)
## binary outcome
ybtr <- ifelse(ytr > 0, 1, 0)
ybte <- ifelse(yte > 0, 1, 0)
## multinomial outcome
ymtr <- dplyr::case_when(
ytr > 1 ~ "a",
ytr <= 1 & ytr > -1 ~ "b",
ytr <= -1 ~ "c"
)
ymte <- dplyr::case_when(
yte > 1 ~ "a",
yte <= 1 & yte > -1 ~ "b",
yte <= -1 ~ "c"
)
cv_ssnet(
model = "ss", family = "gaussian",
x = rbind(xtr, xte), y = c(ytr, yte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2
)
cv_ssnet(
model = "ss", family = "binomial",
x = rbind(xtr, xte), y = c(ybtr, ybte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2, classify = TRUE,
output_param_est = TRUE
)
cv_ssnet(
model = "ss", family = "multinomial",
x = rbind(xtr, xte), y = c(ymtr, ymte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2, classify = FALSE,
output_param_est = TRUE
)
t2 <- proc.time() - t1
t2
t1 <- proc.time()
ns <- 100
nx <- 5
xtr <- matrix(rnorm(ns*nx), nrow = ns, ncol = nx)
xte <- matrix(rnorm(ns*nx), nrow = ns, ncol = nx)
b <- rnorm(nx)
## continuous outcome
ytr <- xtr %*% b + rnorm(ns)
yte <- xte %*% b + rnorm(ns)
## binary outcome
ybtr <- ifelse(ytr > 0, 1, 0)
ybte <- ifelse(yte > 0, 1, 0)
## multinomial outcome
ymtr <- dplyr::case_when(
ytr > 1 ~ "a",
ytr <= 1 & ytr > -1 ~ "b",
ytr <= -1 ~ "c"
)
ymte <- dplyr::case_when(
yte > 1 ~ "a",
yte <= 1 & yte > -1 ~ "b",
yte <= -1 ~ "c"
)
cv_ssnet(
model = "ss", family = "gaussian",
x = rbind(xtr, xte), y = c(ytr, yte),
s0 = c(0.01, 0.05, 0.10), s1 = c(1, 2.5),
nfolds = 3, ncv = 2
)
t2 <- proc.time() - t1
t2
library(ssnet)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)$prior.mean,
type = "list")
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(ssnet)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
?ssnet::prepare
expect_type(ssnet::prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(ssnet)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(ssnet)
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
?ssnet::prepare
expect_type(ssnet::prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
?ssnet::prepare
library(ssnet)
library(testthat)
test_that("prepare() works as expected when family is multinomial.", {
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)$prior.mean,
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = FALSE,
outcome.cats = 1:4)$prior.mean,
type = "double")
})
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)
seq_len(5)
is.list(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4))
is.integer(1:4)
library(ssnet)
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
test_that("prepare() works as expected when family is multinomial.", {
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)$prior.mean,
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = FALSE,
outcome.cats = 1:4)$prior.mean,
type = "double")
})
test_that("Check formating for IAR priors", {
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE),
"User must specify both im.res and x.")
expect_error(ssnet(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE, im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(100), nrow = 10, ncol = 10)),
"User must specify both im.res and x.")
expect_error(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(4, 4), tau.prior = "manual"),
"User must specify tau.manual")
expect_type(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(4, 4)),
"list")
})
test_that("Check Q2 maximization output", {
expect_type(
max_q2_iar(
iar.data = format_iar(
x = matrix(rnorm(10 * 16),
nrow = 10, ncol = 16),
im.res = c(4, 4)),
p = rnorm(16)),
"double")
expect_equal(
length(
max_q2_iar(
iar.data = format_iar(
x = matrix(rnorm(10 * 16),
nrow = 10, ncol = 16),
im.res = c(4, 4)),
p = rnorm(16))),
length(rnorm(16)))
})
test_that("Correct errors and warnings are raised for bad input", {
# bad x and/or y inputs
expect_error(ssnet(x = list(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = data.frame(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = c(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = 1,
family = "gaussian"), "length of y should equal number of rows in x")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rep("a", 10),
family = "gaussian"),
"gaussian family requires numeric y")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rnorm(10),
init = rep(0, 5),
family = "gaussian"),
"must specify initial value to each coefficient except intercept")
# bad EN parameter inputs
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = -1),
"alpha must be 0 or greater and cannot exceed 1.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = 1.01),
"alpha must be 0 or greater and cannot exceed 1.")
# bad spike/slab scales
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(-1, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0.05, 1, 2)),
"ss should contain only 2 elements, 1 spike and 1 slab scale.")
})
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE),
"User must specify both im.res and x.")
expect_error(ssnet(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE, im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(100), nrow = 10, ncol = 10)),
"User must specify both im.res and x.")
library(ssnet)
library(testthat)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = list(f1 = sample(1:3, 10, T),
f2 = sample(1:3, 10, T))),
"foldid must be a numeric vector, matrix, or data frame."
)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T))),
"Each column of foldid must have the same number of unique folds.")
test_that("Bad inputs are not accepted.", {
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = list(f1 = sample(1:3, 10, T),
f2 = sample(1:3, 10, T))),
"foldid must be a numeric vector, matrix, or data frame."
)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T))),
"Each column of foldid must have the same number of unique folds.")
})
cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T)))
