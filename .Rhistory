type = "list")
?ssnet::prepare
expect_type(ssnet::prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(ssnet)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
library(ssnet)
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
?ssnet::prepare
expect_type(ssnet::prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
?ssnet::prepare
library(ssnet)
library(testthat)
test_that("prepare() works as expected when family is multinomial.", {
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)$prior.mean,
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = FALSE,
outcome.cats = 1:4)$prior.mean,
type = "double")
})
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)
seq_len(5)
is.list(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4))
is.integer(1:4)
library(ssnet)
library(testthat)
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
test_that("prepare() works as expected when family is multinomial.", {
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)$prior.mean,
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = FALSE,
outcome.cats = 1:4)$prior.mean,
type = "double")
})
test_that("Check formating for IAR priors", {
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE),
"User must specify both im.res and x.")
expect_error(ssnet(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE, im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(100), nrow = 10, ncol = 10)),
"User must specify both im.res and x.")
expect_error(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(4, 4), tau.prior = "manual"),
"User must specify tau.manual")
expect_type(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(4, 4)),
"list")
})
test_that("Check Q2 maximization output", {
expect_type(
max_q2_iar(
iar.data = format_iar(
x = matrix(rnorm(10 * 16),
nrow = 10, ncol = 16),
im.res = c(4, 4)),
p = rnorm(16)),
"double")
expect_equal(
length(
max_q2_iar(
iar.data = format_iar(
x = matrix(rnorm(10 * 16),
nrow = 10, ncol = 16),
im.res = c(4, 4)),
p = rnorm(16))),
length(rnorm(16)))
})
test_that("Correct errors and warnings are raised for bad input", {
# bad x and/or y inputs
expect_error(ssnet(x = list(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = data.frame(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = c(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = 1,
family = "gaussian"), "length of y should equal number of rows in x")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rep("a", 10),
family = "gaussian"),
"gaussian family requires numeric y")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rnorm(10),
init = rep(0, 5),
family = "gaussian"),
"must specify initial value to each coefficient except intercept")
# bad EN parameter inputs
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = -1),
"alpha must be 0 or greater and cannot exceed 1.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = 1.01),
"alpha must be 0 or greater and cannot exceed 1.")
# bad spike/slab scales
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(-1, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0.05, 1, 2)),
"ss should contain only 2 elements, 1 spike and 1 slab scale.")
})
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE),
"User must specify both im.res and x.")
expect_error(ssnet(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE, im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(100), nrow = 10, ncol = 10)),
"User must specify both im.res and x.")
library(ssnet)
library(testthat)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = list(f1 = sample(1:3, 10, T),
f2 = sample(1:3, 10, T))),
"foldid must be a numeric vector, matrix, or data frame."
)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T))),
"Each column of foldid must have the same number of unique folds.")
test_that("Bad inputs are not accepted.", {
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = list(f1 = sample(1:3, 10, T),
f2 = sample(1:3, 10, T))),
"foldid must be a numeric vector, matrix, or data frame."
)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T))),
"Each column of foldid must have the same number of unique folds.")
})
cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T)))
library(ssnet)
library(testthat)
test_that("Bad inputs are not accepted.", {
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = list(f1 = sample(1:3, 10, T),
f2 = sample(1:3, 10, T))),
"foldid must be a numeric vector, matrix, or data frame."
)
expect_error(cv_ssnet(model = "ss",
x = matrix(rnorm(10*10), nrow = 10, ncol = 10),
y = rnorm(10),
family = "gaussian",
foldid = data.frame(
f1 = sample(1:3, 10, T),
f2 = sample(1:4, 10, T))),
"Each column of foldid must have the same number of unique folds.")
})
test_that("Bad inputs are not accepted.", {
expect_error(compare_ssnet(variable_selection = TRUE,
x = matrix(rnorm(100), nrow = 10, ncol = 10),
B = c(1, 2)),
"Variable selection measures requires a true parameter vector of appropriate length. \n Did you forget to remove the intercept or specify B?")
expect_error(compare_ssnet(models = "read my mind!"),
"Models must be a combination of all, glmnet, ss, ss_iar.")
expect_error(compare_ssnet(models = "glmnet", family = "read my mind!"),
"Models must be a combination of gaussian, binomial, poisson, cox.")
})
test_that("eval_classify throws correct errors", {
expect_error(eval_classify(num.class = 1),
"Require at least 2 classes.")
expect_error(eval_classify(num.class = 3, beta.hat = c("a", "b")),
"Parameter vector beta.hat must contain only numeric values.")
expect_error(eval_classify(num.class = 3, beta.hat = 1:5, y = "1"),
"y must contain only numeric values.")
expect_error(eval_classify(num.class = 2, beta.hat = 1:3,
y = rnorm(10),
x = data.frame(x1 = rnorm(10),
x2 = rnorm(10),
x3 = sample(x = c("a", "b"),
size = 10,
replace = TRUE))),
"x must contain only numeric values.")
})
test_that("vector and data frame inputs are equal", {
expect_equal(
eval_classify(
beta.hat = data.frame(
a = 1, b1 = 3, b2 = -3
),
y = data.frame(
s1 = 1, s2 = 0, s3 = 0,
s4 = 1, s5 = 0, s6 = 1
),
x = data.frame(x1 = 1:6, x2 = 1:6),
family = "binomial",
classify.rule = 0.5),
eval_classify(
beta.hat = c(a = 1, b1 = 3, b2 = -3),
y = c(s1 = 1, s2 = 0, s3 = 0, s4 = 1, s5 = 0, s6 = 1),
x = matrix(rep(1:6, 2), ncol = 2),
family = "binomial",
classify.rule = 0.5
)
)
})
test_that("prepare() works as expected when family is multinomial.", {
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4),
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = TRUE,
outcome.cats = 1:4)$prior.mean,
type = "list")
expect_type(prepare(x = matrix(c(1, 3, 3, 4,
2, 3, 1, 3,
5, 1, -1, 0,
3, 2, 0, 1 ),
nrow = 4, ncol = 4),
intercept = FALSE, prior.mean = 0,
prior.sd = 1, prior.scale = 1, prior.df = 1,
group = NULL, multinomial = FALSE,
outcome.cats = 1:4)$prior.mean,
type = "double")
})
test_that("Check formating for IAR priors", {
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE),
"User must specify both im.res and x.")
expect_error(ssnet(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
y = rnorm(10), family = "gaussian",
iar.prior = TRUE, im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(100), nrow = 10, ncol = 10)),
"User must specify both im.res and x.")
expect_error(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(5, 5)),
"The product of im.res should equal the number of columns in x.")
expect_error(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(4, 4), tau.prior = "manual"),
"User must specify tau.manual")
expect_type(format_iar(x = matrix(rnorm(10 * 16), nrow = 10, ncol = 16),
im.res = c(4, 4)),
"list")
})
test_that("Check Q2 maximization output", {
expect_type(
max_q2_iar(
iar.data = format_iar(
x = matrix(rnorm(10 * 16),
nrow = 10, ncol = 16),
im.res = c(4, 4)),
p = rnorm(16)),
"double")
expect_equal(
length(
max_q2_iar(
iar.data = format_iar(
x = matrix(rnorm(10 * 16),
nrow = 10, ncol = 16),
im.res = c(4, 4)),
p = rnorm(16))),
length(rnorm(16)))
})
test_that("Correct errors and warnings are raised for bad input", {
# bad x and/or y inputs
expect_error(ssnet(x = list(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = data.frame(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = c(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = 1,
family = "gaussian"), "length of y should equal number of rows in x")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rep("a", 10),
family = "gaussian"),
"gaussian family requires numeric y")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rnorm(10),
init = rep(0, 5),
family = "gaussian"),
"must specify initial value to each coefficient except intercept")
# bad EN parameter inputs
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = -1),
"alpha must be 0 or greater and cannot exceed 1.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = 1.01),
"alpha must be 0 or greater and cannot exceed 1.")
# bad spike/slab scales
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(-1, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0.05, 1, 2)),
"ss should contain only 2 elements, 1 spike and 1 slab scale.")
})
test_that("Correct errors and warnings are raised for bad input", {
# bad x and/or y inputs
expect_error(ssnet(x = list(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = data.frame(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = c(a = 'x'), family = "gaussian"), "x should be a matrix")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = 1,
family = "gaussian"), "length of y should equal number of rows in x")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rep("a", 10),
family = "gaussian"),
"gaussian family requires numeric y")
expect_error(ssnet(x = matrix(1:100, nrow = 10, ncol = 10), y = rnorm(10),
init = rep(0, 5),
family = "gaussian"),
"must specify initial value to each coefficient except intercept")
# bad EN parameter inputs
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = -1),
"alpha must be 0 or greater and cannot exceed 1.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
alpha = 1.01),
"alpha must be 0 or greater and cannot exceed 1.")
# bad spike/slab scales
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(-1, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0, 1)),
"scale values must exceed 0.")
expect_error(ssnet(x = matrix(rnorm(100), nrow = 10, ncol = 10),
y = rnorm(10), family = "gaussian",
ss = c(0.05, 1, 2)),
"ss should contain only 2 elements, 1 spike and 1 slab scale.")
})
1385915 + 232736
1385915 + 210984
